- name: Installing Docker on my Google Compute instance
  hosts: myhosts
  become: true # run with sudo
  vars_files:
   - tf_ansible_vars_file.yml
   # using outputs from Terraform

  tasks:
   - name: Check mandatory variables imported from Terraform
     ansible.builtin.assert:
      that:
       - tf_postres_ip is defined
       - tf_docker_registry_service_account is defined
       - tf_gcp_project_name is defined
       - tf_docker_registry_name is defined
       - tf_region is defined
      fail_msg: "tf_* variable usually defined in 'tf_ansible_vars_file.yml' is missing"

   - name: Ping my hosts
     ansible.builtin.ping: # ping module

   - name: Update apt cache
     ansible.builtin.apt:
      update_cache: true

   - name: Install required system packages
     ansible.builtin.apt:
      pkg:
       - apt-transport-https
       - ca-certificates
       - curl
       - gnupg
       - software-properties-common
      update_cache: true

   - name: Add Docker GPG apt Key
     ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

   - name: Add Docker Repository
     ansible.builtin.apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
      state: present
      update_cache: true

   - name: Update apt cache
     ansible.builtin.apt:
      update_cache: true

   - name: Update apt and install docker-ce
     ansible.builtin.apt:
      name: docker-ce
      update_cache: true

   - name: Configure gcloud as the credential helper for the GCP Docker Repository
     ansible.builtin.command: gcloud auth configure-docker {{ tf_region }}-docker.pkg.dev --quiet
     register: output
     changed_when: output.rc == 0

   - name: Configure service account to use to use GCP Docker Registry
     ansible.builtin.command: gcloud config set auth/impersonate_service_account {{ tf_docker_registry_service_account }}
     register: output
     changed_when: output.rc == 0
     # TODO: use  variable instead of docker repo / project name

   - name: Pull docker image
     community.docker.docker_image:
      source: pull
      name: "{{ tf_region }}-docker.pkg.dev/{{ tf_gcp_project_name }}/{{ tf_docker_registry_name }}\
        /todo-app-java:main-0159a3cfa1d9b91af68bc0ddb08d3afb048e8a91"

   - name: Create .env file to store postgres credentials
     ansible.builtin.blockinfile:
      path: /env.list
      create: true
      mode: 600
      content: |
       MYAPP_JDBC_USER=myuser
       MYAPP_JDBC_PASS=mysecretpassword
       MYAPP_JDBC_URL=jdbc:postgresql://{{ tf_postres_ip }}:5432/todo_db

## TODO: use the latest image
   - name: Run docker container
     community.docker.docker_container:
      name: todo-app-java
      image: "{{ tf_region }}-docker.pkg.dev/{{ tf_gcp_project_name }}/{{ tf_docker_registry_name }}\
        /todo-app-java:main-0159a3cfa1d9b91af68bc0ddb08d3afb048e8a91"
      env_file: /env.list
      detach: true
      published_ports:
       - 8080:8080
